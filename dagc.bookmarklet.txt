javascript: (() => { const parseGrade = s => parseFloat(s.replace(",", ".")); const formatGrade = s => s.endsWith(",00") ? s.replace(",00", "") : s.endsWith("0") ? s.slice(0, -1) : s; const determineGradeColor = grade => { const value = parseGrade(grade); return value >= 4.8 ? "darkgreen" : value >= 4.5 ? "green" : value >= 4 ? "#66cc66" : value >= 3.5 ? "orange" : value >= 3 ? "#FF8C00" : "red"; }; const createTableCell = (value, i = 0) => { const td = document.createElement("td"); td.textContent = value; td.style.cssText = "font-weight:bold;text-align:center;"; if (i) td.style.setProperty("color", determineGradeColor(value), "important"); return td; }; const createTableRow = (values, header = false) => { const tr = document.createElement("tr"); if (header) tr.className = "agc-stats"; values.forEach((value, i) => tr.appendChild(header ? Object.assign(document.createElement("th"), {textContent: value, style: "background:#f0f0f0"}) : createTableCell(formatGrade(value), i))); return tr; }; const extractGradeData = () => { document.querySelectorAll(".card-body table").forEach(table => { const headerCells = table.querySelectorAll("thead th"); const rows = table.querySelectorAll("tbody tr"); let indexECTS = -1, indexGrade = -1; headerCells.forEach((cell, index) => { const text = cell.textContent.trim(); if (text === "Punkty ECTS") indexECTS = index; if (text === "Ocena") indexGrade = index; }); if (indexECTS === -1 || indexGrade === -1) return; const allGrades = [], gradesWithECTS = []; rows.forEach(row => { const cells = row.querySelectorAll("td"); if (cells.length <= Math.max(indexECTS, indexGrade)) return; const grade = parseGrade(cells[indexGrade].textContent.trim().replace(",", ".")); const ects = cells[indexECTS].textContent.trim(); if (!isNaN(grade)) { allGrades.push(grade); if (ects) gradesWithECTS.push(grade); } }); const existingStatsRow = table.querySelector(".agc-stats"); if (existingStatsRow) existingStatsRow.remove(); if (!allGrades.length) return; const calculateAverage = arr => (arr.reduce((sum, value) => sum + value, 0) / arr.length).toFixed(2).replace(".", ","); const calculateMin = arr => Math.min(...arr).toFixed(2).replace(".", ","); const calculateMax = arr => Math.max(...arr).toFixed(2).replace(".", ","); const tbody = table.querySelector("tbody"); tbody.appendChild(createTableRow(["Statystyka", "Średnia ocena", "Najniższa ocena", "Najwyższa ocena"], true)); tbody.appendChild(createTableRow(["ECTS", calculateAverage(gradesWithECTS), calculateMin(gradesWithECTS), calculateMax(gradesWithECTS)])); tbody.appendChild(createTableRow(["Ogółem", calculateAverage(allGrades), calculateMin(allGrades), calculateMax(allGrades)])); }); }; const isTargetPage = url => url?.includes("&PokazujOceneItermin=True"); const hookXMLHttpRequest = () => { const originalOpen = XMLHttpRequest.prototype.open; XMLHttpRequest.prototype.open = function(_, url) { this._url = url; return originalOpen.apply(this, arguments); }; const originalSend = XMLHttpRequest.prototype.send; XMLHttpRequest.prototype.send = function() { this.addEventListener("load", () => isTargetPage(this._url) && extractGradeData()); return originalSend.apply(this, arguments); }; }; const hookFetch = () => { const originalFetch = window.fetch; window.fetch = (...args) => originalFetch(...args).then(response => { const url = args[0] instanceof Request ? args[0].url : args[0]; if (isTargetPage(url)) extractGradeData(); return response; }); }; hookXMLHttpRequest(); hookFetch(); })(); void 0;