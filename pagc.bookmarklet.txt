javascript: (() => { let includeUnscoredTasks = false; let lastWidth = "0px"; const getGradeInfo = percent => { if (percent >= 90) return ["5", "darkgreen"]; if (percent >= 80) return ["4.5", "green"]; if (percent >= 70) return ["4", "#66cc66"]; if (percent >= 60) return ["3.5", "#FF8C00"]; if (percent >= 50) return ["3", "orange"]; return ["2", "red"]; }; const updateTable = () => { let totalPoints = 0, maxPoints = 0, totalPercentage = 0, taskCount = 0, hasUnscoredTasks = false; document.querySelectorAll("li.kraken3-task").forEach(el => { const m = el.querySelector(".kraken3-task__status_path .currentStatus")?.textContent.match(/(\d+)\s*\/\s*(\d+)\s*pts/); if (m) { const [earned, possible] = [+m[1], +m[2]]; if (earned === 0) hasUnscoredTasks = true; if (includeUnscoredTasks && earned === 0) return; totalPoints += earned; maxPoints += possible; totalPercentage += Math.floor(earned / possible * 100); taskCount++; } }); const avg = taskCount ? Math.round(totalPercentage / taskCount * 100) / 100 : 0; const [grade, color] = getGradeInfo(avg); const [altGrade, altColor] = getGradeInfo(avg + 5); const showAlt = grade !== altGrade; const gradeDisplay = showAlt ? `<span style="color:${color};display:inline-block;width:45%;text-align:center">${grade}</span> <span style="color:gray;display:inline-block;width:10%;text-align:center">/</span> <span style="color:${altColor};display:inline-block;width:45%;text-align:center">${altGrade}</span>` : `<span style="color:${color};display:inline-block;width:100%;text-align:center">${grade}</span>`; let tbl = document.getElementById("zgm"); if (!tbl) { tbl = document.createElement("table"); tbl.id = "zgm"; const firstTask = document.querySelector(".kraken3-task"); if (firstTask?.parentNode) { firstTask.parentNode.insertBefore(tbl, firstTask); } } tbl.style.cssText = "margin:20px auto;border-collapse:collapse;font:18px 'Roboto',sans-serif;white-space:nowrap;text-align:center"; tbl.innerHTML = taskCount ? ` <thead> <tr style="background:#f1f1f1;color:gray"> <th style="font-weight:bold">Stat</th> <th style="font-weight:bold">Uzyskano</th> <th style="font-weight:bold">Max</th> </tr> </thead> <tbody> <tr> <td style="font-weight:bold">Ocena</td> <td style="font-weight:bold">${gradeDisplay}</td> <td style="font-weight:bold;color:black">5</td> </tr> <tr> <td style="font-weight:bold">pts</td> <td style="font-weight:bold;color:${color}">${totalPoints}</td> <td style="font-weight:bold;color:black">${maxPoints}</td> </tr> <tr> <td style="font-weight:bold">%</td> <td style="font-weight:bold;color:${color}">${avg}%</td> <td style="font-weight:bold;color:black">100%</td> </tr> </tbody>` : ""; tbl.style.display = taskCount ? "table" : "none"; if (taskCount) { tbl.style.width = "auto"; lastWidth = tbl.offsetWidth + "px"; tbl.style.width = lastWidth; } let toggle = document.getElementById("qop"); if (hasUnscoredTasks || includeUnscoredTasks) { if (!toggle) { toggle = document.createElement("table"); toggle.id = "qop"; toggle.style.cssText = "margin:-20px auto 20px auto;border-collapse:collapse;font:18px 'Roboto',sans-serif"; toggle.innerHTML = ` <tr> <td style="background:#f1f1f1;text-align:center;padding:10px;cursor:pointer;font-weight:bold;color:gray"></td> </tr>`; toggle.querySelector("td").onclick = () => { includeUnscoredTasks = !includeUnscoredTasks; updateTable(); }; tbl.parentNode.insertBefore(toggle, tbl.nextSibling); } toggle.querySelector("td").innerHTML = includeUnscoredTasks ? "UwzglÄ™dnij nieocenione zadania" : "Ignoruj nieocenione zadania"; toggle.style.display = "table"; toggle.style.width = lastWidth; } else if (toggle) { toggle.remove(); } }; updateTable(); })(); void 0;