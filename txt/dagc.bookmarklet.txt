javascript: (() => { const parseGrade = s => parseFloat(s.replace(",", ".")); const formatGrade = s => s.endsWith(",00") ? s.replace(",00", "") : s.endsWith("0") ? s.slice(0, -1) : s; const determineGradeColor = grade => { const value = parseGrade(grade); return value >= 4.8 ? "darkgreen" : value >= 4.5 ? "green" : value >= 4 ? "#66cc66" : value >= 3.5 ? "orange" : value >= 3 ? "#FF8C00" : "red"; }; const createTableCell = (value, colorFlag = false) => { const td = document.createElement("td"); td.textContent = value; td.style.cssText = "font-weight:bold;text-align:center;"; if (colorFlag) td.style.setProperty("color", determineGradeColor(value), "important"); return td; }; const createTableRow = (values, header = false) => { const tr = document.createElement("tr"); tr.classList.add("agc-stats"); values.forEach((value, i) => { if (header) { const th = document.createElement("th"); th.textContent = value; th.style.background = "#f0f0f0"; tr.appendChild(th); } else { tr.appendChild(createTableCell(formatGrade(value), i > 0)); } }); return tr; }; let hasRun = false; const extractGradeData = () => { if (hasRun) return; hasRun = true; document.querySelectorAll(".card-body table").forEach(table => { table.querySelectorAll("tr.agc-stats").forEach(row => row.remove()); const headerCells = table.querySelectorAll("thead th"); const rows = table.querySelectorAll("tbody tr"); let indexECTS = -1, indexGrade = -1; headerCells.forEach((cell, index) => { const text = cell.textContent.trim(); if (text === "Punkty ECTS") indexECTS = index; if (text === "Ocena") indexGrade = index; }); if (indexECTS === -1 || indexGrade === -1) return; const allGrades = [], gradesWithECTS = []; rows.forEach(row => { const cells = row.querySelectorAll("td"); if (cells.length <= Math.max(indexECTS, indexGrade)) return; const grade = parseGrade(cells[indexGrade].textContent.trim().replace(",", ".")); const ects = cells[indexECTS].textContent.trim(); if (!isNaN(grade)) { allGrades.push(grade); if (ects) gradesWithECTS.push(grade); } }); if (!allGrades.length) return; const calculateAverage = arr => (arr.reduce((sum, value) => sum + value, 0) / arr.length).toFixed(2).replace(".", ","); const calculateMin = arr => Math.min(...arr).toFixed(2).replace(".", ","); const calculateMax = arr => Math.max(...arr).toFixed(2).replace(".", ","); const tbody = table.querySelector("tbody"); tbody.appendChild(createTableRow(["Statystyka", "Średnia ocena", "Najniższa ocena", "Najwyższa ocena"], true)); tbody.appendChild(createTableRow(["ECTS", calculateAverage(gradesWithECTS), calculateMin(gradesWithECTS), calculateMax(gradesWithECTS)])); tbody.appendChild(createTableRow(["Ogółem", calculateAverage(allGrades), calculateMin(allGrades), calculateMax(allGrades)])); }); }; extractGradeData(); })(); void 0;